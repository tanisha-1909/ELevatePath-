generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  clerkUserId      String           @unique
  email            String           @unique
  name             String?
  imageUrl         String?
  industry         String?          // just a label string, optional
  industryInsightId String?         // FK to IndustryInsight
  industryInsight  IndustryInsight? @relation(fields: [industryInsightId], references: [id])

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Profile fields
  bio              String?
  experience       Int?

  // Relations
  skills           String[]
  assessments      Assessment[]
  resume           Resume?
  coverLetter      CoverLetter[]
  mockInterviewSessions MockInterviewSession[]
}


model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float     // Overall quiz score
  questions     Json[]    // Array of {question, answer, userAnswer, isCorrect}
  category      String    // "Technical", "Behavioral", etc.
  improvementTip String?  // AI-generated improvement tip
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique    // One resume per user
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text // Markdown content
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  status          String    @default("draft") // draft, completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

// Combined Industry Trends and Salary Insights
model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique  // The industry this data belongs to (e.g., "tech-software-development")

  // Users in this industry
  users         User[]

  // Salary data
  salaryRanges  Json[]    // Array of { role: string, min: float, max: float, median: float, location: string? }

  // Industry trends
  growthRate    Float     // Industry growth rate
  demandLevel   DemandLevel    // "High", "Medium", "Low"
  topSkills     String[]  // Most in-demand skills

  // Market conditions
  marketOutlook MarketOutlook    // "Positive", "Neutral", "Negative"
  keyTrends     String[]  // Array of current industry trends

  // Learning suggestions
  recommendedSkills String[]  // Skills recommended for the industry

  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  // Scheduled update time

  @@index([industry])
}

enum DemandLevel{
  HIGH
  MEDIUM
  LOW
}
enum MarketOutlook{
  POSITIVE
  NEUTRAL
  NEGATIVE
}


// Live Mock Interview session tracking
model MockInterviewSession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      String   // e.g., "Product Manager"
  category  String   // e.g., "Behavioral" | "Technical"
  status    String   @default("active") // active | ended
  summary   String?  @db.Text            // Final AI-generated performance summary
  score     Float?                        // 0-100 score
  startedAt DateTime @default(now())
  endedAt   DateTime?
  messages  MockInterviewMessage[]

  @@index([userId])
}

model MockInterviewMessage {
  id        String   @id @default(cuid())
  sessionId String
  session   MockInterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sender    String   // "AI" | "USER"
  content   String   @db.Text
  evaluation String? @db.Text             // Optional brief feedback from AI about the user's last answer
  createdAt DateTime @default(now())

  @@index([sessionId])

}